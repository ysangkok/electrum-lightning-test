diff --git a/electrum b/electrum
index 2990639f..e374a0f2 100755
--- a/electrum
+++ b/electrum
@@ -363,6 +363,10 @@ if __name__ == '__main__':
         bitcoin.set_nolnet()
         network.set_nolnet()
 
+    if config.get('simnet'):
+        bitcoin.set_simnet()
+        network.set_simnet()
+
     # run non-RPC commands separately
     if cmdname in ['create', 'restore']:
         run_non_RPC(config)
diff --git a/lib/bitcoin.py b/lib/bitcoin.py
index bcc289b2..dcd4660d 100644
--- a/lib/bitcoin.py
+++ b/lib/bitcoin.py
@@ -75,6 +75,19 @@ def set_nolnet():
     HEADERS_URL = "https://headers.electrum.org/nolnet_headers"
     GENESIS = "663c88be18d07c45f87f910b93a1a71ed9ef1946cad50eb6a6f3af4c424625c6"
 
+def set_simnet():
+    global ADDRTYPE_P2PKH, ADDRTYPE_P2SH, ADDRTYPE_P2WPKH
+    global XPRV_HEADER, XPUB_HEADER
+    global NOLNET, HEADERS_URL
+    global GENESIS
+    TESTNET = True
+    ADDRTYPE_P2PKH = 0x3f
+    ADDRTYPE_P2SH = 0x7b
+    ADDRTYPE_P2WPKH = 0xc5 # really?
+    XPRV_HEADER = 0x0420b900
+    XPUB_HEADER = 0x0420bd3a
+    HEADERS_URL = None
+    GENESIS = "683e86bd5c6d110d91b94b97137ba6bfe02dbbdb8e3dff722a669b5d69d77af6"
 
 
 ################################## transactions
diff --git a/lib/commands.py b/lib/commands.py
index 442228ee..7b853b52 100644
--- a/lib/commands.py
+++ b/lib/commands.py
@@ -669,6 +669,11 @@ class Commands:
         # for the python console
         return sorted(known_commands.keys())
 
+    @command('')
+    def listenandsign(self):
+        import lightning
+        return lightning.listen_and_sign(self.wallet)
+
 param_descriptions = {
     'privkey': 'Private key. Type \'?\' to get a prompt.',
     'destination': 'Bitcoin address, contact or alias',
@@ -818,6 +823,7 @@ def add_global_options(parser):
     group.add_argument("--testnet", action="store_true", dest="testnet", default=False, help="Use Testnet")
     group.add_argument("--segwit", action="store_true", dest="segwit", default=False, help="The Wizard will create Segwit seed phrases (Testnet only).")
     group.add_argument("--nolnet", action="store_true", dest="nolnet", default=False, help="Use Nolnet")
+    group.add_argument("--simnet", action="store_true", dest="simnet", default=False, help="Use Simnet")
 
 def get_parser():
     # create main parser
diff --git a/lib/lightning.py b/lib/lightning.py
new file mode 100644
index 00000000..1af110aa
--- /dev/null
+++ b/lib/lightning.py
@@ -0,0 +1,105 @@
+from __future__ import print_function
+from websocket import WebSocketApp
+import websocket
+import keystore
+import struct
+
+signer_key = None
+signer_read_key = False
+def on_message(ws, message):
+    global signer_key, signer_read_key
+
+    def toint(x):
+      if len(x) == 2:
+        fmt = ">h"
+      elif len(x) == 4:
+        fmt = ">i"
+      elif len(x) == 8:
+        fmt = ">q"
+      else:
+        assert False
+      return struct.unpack(fmt, x)[0]
+
+    if not signer_read_key:
+        signer_key = message
+        signer_read_key = True
+        print("read key")
+        return
+    k = keystore.BIP32_KeyStore({})
+    k.add_xprv_from_seed(bytes(signer_key), 0, 'm/0/0')
+    print(k)
+    if message[:len("SignOutputRaw")] == "SignOutputRaw":
+      rest = message[len("SignOutputRaw"):]
+      print("SignOutputRaw")
+    elif message[:len("ComputeInputScript")] == "ComputeInputScript":
+      rest = message[len("ComputeInputScript"):]
+      print("ComputeInputScript")
+      txlen = toint(rest[:2]); rest = rest[2:]
+      print("txlen", txlen)
+      tx = rest[:txlen]; rest = rest[txlen:]
+    else:
+      assert False
+
+    overalllength = toint(rest[:2]); rest = rest[2:]
+    if overalllength != len(rest):
+      print(overalllength, len(rest))
+      assert False
+
+
+    pubkey = rest[:33]; rest = rest[33:]
+
+    singletweaklen = toint(rest[:2]); rest = rest[2:]
+    print("singletweaklen", singletweaklen)
+    assert len(rest) > singletweaklen
+    singletweak = rest[:singletweaklen]; rest = rest[singletweaklen:]
+    assert len(singletweak) == singletweaklen
+    doubletweak = rest[:32]; rest = rest[32:]
+    witnessscriptlen = toint(rest[:2]); rest = rest[2:]
+    print("witnessscriptlen", witnessscriptlen)
+    assert len(rest) > witnessscriptlen
+    witnessscript = rest[:witnessscriptlen]; rest = rest[witnessscriptlen:]
+    assert len(witnessscript) == witnessscriptlen
+    assert len(rest) > 4
+    outputvalue = toint(rest[:8]); rest = rest[8:]
+    outputpkscriptlen = toint(rest[:2]); rest = rest[2:]
+    assert len(rest) > outputpkscriptlen
+    outputpkscript = rest[:outputpkscriptlen]; rest = rest[outputpkscriptlen:]
+    if len(outputpkscript) != outputpkscriptlen:
+      print(len(outputpkscript), outputpkscriptlen)
+      assert False
+
+    inputindex = rest[-8:]; rest = rest[:-8]
+    assert len(inputindex) == 8
+    inputindex = toint(inputindex)
+
+    hashoutputs = rest[-32:]; rest = rest[:len(rest)-32]
+    assert len(hashoutputs) == 32
+    hashsequence = rest[-32:]; rest = rest[:len(rest)-32]
+    assert len(hashsequence) == 32
+    hashprevouts = rest[-32:]; rest = rest[:len(rest)-32]
+    assert len(hashprevouts) == 32
+    hashtype = rest[-4:]; rest = rest[:-4]
+    assert len(hashtype) == 4
+
+    if len(rest) != 0:
+      print(b"rest not empty: " + str(len(rest)))
+      assert False
+
+    del message
+    if doubletweak == "\x00"*32:
+      doubletweak = None
+    if len(singletweak) == 0:
+      singletweak = None
+    if len(witnessscript) == 0:
+      witnessscript = None
+
+    print(locals())
+
+
+def listen_and_sign(wallet):
+        websocket.enableTrace(True)
+        handlers = {
+          "on_message": on_message
+        }
+        ws = WebSocketApp('ws://localhost:8765/', **handlers)
+        ws.run_forever()
diff --git a/lib/network.py b/lib/network.py
index 1a45c313..d46548be 100644
--- a/lib/network.py
+++ b/lib/network.py
@@ -92,6 +92,13 @@ def set_nolnet():
         '14.3.140.101': DEFAULT_PORTS,
     }
 
+def set_simnet():
+    global DEFAULT_PORTS, DEFAULT_SERVERS
+    DEFAULT_PORTS = {'t':'50001', 's':'50002'}
+    DEFAULT_SERVERS = {
+        '127.0.0.1': DEFAULT_PORTS,
+    }
+
 NODES_RETRY_INTERVAL = 60
 SERVER_RETRY_INTERVAL = 10
 
diff --git a/lib/simple_config.py b/lib/simple_config.py
index 9be6fdc9..d1af7757 100644
--- a/lib/simple_config.py
+++ b/lib/simple_config.py
@@ -84,6 +84,8 @@ class SimpleConfig(PrintError):
             path = os.path.join(path, 'testnet')
         elif self.get('nolnet'):
             path = os.path.join(path, 'nolnet')
+        elif self.get('simnet'):
+            path = os.path.join(path, 'simnet')
 
         # Make directory if it does not yet exist.
         if not os.path.exists(path):
